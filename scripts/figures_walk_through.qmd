---
title: "Sorghum and Rye Project Figures"
format: html
---

# Load libraries
```{r}
library(tidyverse)
library(lubridate)
library(ggtext)
library(ggpubr)
library(emmeans)
library(multcomp)
library(gt)
library(zoo)
library(janitor)
```

# Plot Theme

```{r}
# Hokusai-inspired color palette
hokusai_colors <- c(
  primary_blue = "#2B4B72",    # deep wave blue
  secondary_blue = "#A5CAD2",  # foam blue
  accent_blue = "#1A3B57",     # dark sea blue
  sand = "#E8DCC4",           # beach/paper color
  brown = "#714C36",          # wood block brown
  cloud_grey = "#B7B5B3",     # storm cloud grey
  mountain = "#464A4F"        # Mount Fuji grey
)

# Create theme function
theme_hokusai <- function(base_size = 12) {
  theme_minimal(base_size = base_size) %+replace%
    theme(
      # Background elements
      panel.background = element_rect(fill = "#F9F6ED", color = NA),  # light sand color
      plot.background = element_rect(fill = "#F9F6ED", color = NA),
      
      # Grid lines
      panel.grid.major = element_line(color = alpha("#B7B5B3", 0.2)),
      panel.grid.minor = element_blank(),
      
      # Text elements
      text = element_text(color = hokusai_colors["mountain"]),
      axis.text = element_text(color = hokusai_colors["mountain"]),
      axis.title = element_text(color = hokusai_colors["mountain"], face = "bold"),
      plot.title = element_text(color = hokusai_colors["mountain"], 
                              face = "bold", 
                              size = base_size * 1.2),
      
      # Facet labels
      strip.text = element_text(color = hokusai_colors["mountain"],
                              face = "bold",
                              size = base_size),
      strip.background = element_rect(fill = alpha(hokusai_colors["secondary_blue"], 0.2)),
      
      # Legend
      legend.background = element_rect(fill = "#F9F6ED"),
      legend.key = element_rect(fill = "#F9F6ED"),
      
      # Other
      axis.text.x = element_text(angle = 45, hjust = 1),
      panel.spacing = unit(2, "lines")
    )
}

# Create a scale for the treatment colors using the Hokusai palette
scale_color_hokusai_d <- function() {
  scale_color_manual(
    values = c(
      "Sorghum" = "#714C36",         # brown
      "Sorghum + Rye" = "#2B4B72",   # deep blue
      "Corn" = "#1A3B57",            # dark blue
      "Soy" = "#B7B5B3"             # grey
      # Add any other treatments that appear in your data
      # Make sure the names match EXACTLY
      # "Treatment Name" = "hex color"
    )
  )
}

scale_fill_hokusai_d <- function() {
  scale_fill_manual(
    values = c(
      "Sorghum" = "#714C36",         # brown
      "Sorghum + Rye" = "#2B4B72",   # deep blue
      "Corn" = "#1A3B57",            # dark blue
      "Soy" = "#B7B5B3"             # grey
      # Add any other treatments that appear in your data
      # Make sure the names match EXACTLY
      # "Treatment Name" = "hex color"
    )
  )
}


```

# Table 1

```{r}

```

# Table 2
Start with reading in the date that was cleaned in the 'scripts/clean_soil.R'

```{r}
df <- read_csv("data/soils/cleaned_soil_data.csv")
df <- df %>% 
  filter(treatment %in% c("Sorghum", "Sorghum + Rye"))
  
# ---- Table 2: Salt-extractable ammonium and nitrate -----------------------
# Summary of salt-extractable ammonium and nitrate with ANOVA p-values
colnames(df)
soil_summary <- df %>%
  group_by(year, date, treatment) %>%
  summarise(
    ammonium_mean = mean(ammonia_ppm, na.rm = TRUE),
    ammonium_se = sd(ammonia_ppm, na.rm = TRUE) / sqrt(n()),
    nitrate_mean = mean(nitrate_ppm, na.rm = TRUE),
    nitrate_se = sd(nitrate_ppm, na.rm = TRUE) / sqrt(n()),
    .groups = "drop"
  )

# ANOVA for ammonium and nitrate
aov_ammonium <- aov(ammonia_ppm ~ year * date * treatment, data = df)
aov_nitrate <- aov(nitrate_ppm ~ year * date * treatment, data = df)

# Calculate pairwise t-tests for each date/year combination
library(broom)

# Function to perform pairwise t-tests within each group
get_pairwise_pvals <- function(data, variable) {
  data %>%
    group_by(year, date) %>%
    group_modify(~{
      if(length(unique(.x$treatment)) < 2) {
        return(tibble(p_value = NA_real_))
      }
      # Perform pairwise t-test between treatments
      trts <- unique(.x$treatment)
      if(length(trts) == 2) {
        t_result <- t.test(.x[[variable]][.x$treatment == trts[1]], 
                          .x[[variable]][.x$treatment == trts[2]])
        return(tibble(p_value = t_result$p.value))
      } else {
        # For more than 2 treatments, use pairwise t-tests
        pairwise_result <- pairwise.t.test(.x[[variable]], .x$treatment, 
                                          p.adjust.method = "none")
        # Return the minimum p-value (most significant comparison)
        return(tibble(p_value = min(pairwise_result$p.value, na.rm = TRUE)))
      }
    }) %>%
    ungroup()
}

# Get p-values for each combination
ammonium_pvals <- get_pairwise_pvals(df, "ammonia_ppm")
nitrate_pvals <- get_pairwise_pvals(df, "nitrate_ppm")

# Add total inorganic N to original data
df <- df %>%
  mutate(total_inorganic_n = ammonia_ppm + nitrate_ppm)

# Recalculate soil_summary with total N
soil_summary <- df %>%
  group_by(year, date, treatment) %>%
  summarise(
    ammonium_mean = mean(ammonia_ppm, na.rm = TRUE),
    ammonium_se = sd(ammonia_ppm, na.rm = TRUE) / sqrt(sum(!is.na(ammonia_ppm))),
    nitrate_mean = mean(nitrate_ppm, na.rm = TRUE),
    nitrate_se = sd(nitrate_ppm, na.rm = TRUE) / sqrt(sum(!is.na(nitrate_ppm))),
    total_n_mean = mean(total_inorganic_n, na.rm = TRUE),
    total_n_se = sd(total_inorganic_n, na.rm = TRUE) / sqrt(sum(!is.na(total_inorganic_n))),
    .groups = "drop"
  )

# Get p-values for total N as well
total_n_pvals <- get_pairwise_pvals(df, "total_inorganic_n")

# Combine with soil_summary
soil_summary_with_p <- soil_summary %>%
  left_join(ammonium_pvals %>% rename(ammonium_p = p_value), 
            by = c("year", "date")) %>%
  left_join(nitrate_pvals %>% rename(nitrate_p = p_value), 
            by = c("year", "date")) %>%
  left_join(total_n_pvals %>% rename(total_n_p = p_value), 
            by = c("year", "date"))

# Assemble table with letter significance indicators
table2 <- soil_summary_with_p %>%
  pivot_longer(
    cols = c(ammonium_mean, ammonium_se, nitrate_mean, nitrate_se, total_n_mean, total_n_se),
    names_to = c("variable", ".value"),
    names_pattern = "(.*)_(mean|se)"
  ) %>%
  mutate(
    result = sprintf("%.2f ± %.2f", mean, se),
    # Add letter significance indicators
    p_val = case_when(
      variable == "ammonium" ~ ammonium_p,
      variable == "nitrate" ~ nitrate_p,
      variable == "total_n" ~ total_n_p,
      TRUE ~ NA_real_
    ),
    significance_letter = case_when(
      is.na(p_val) ~ "",
      p_val < 0.001 ~ "a",
      p_val < 0.01 ~ "b", 
      p_val < 0.05 ~ "c",
      TRUE ~ ""
    ),
    result_with_sig = paste0(result, ifelse(significance_letter == "", "", paste0(" ", significance_letter)))
  )

table2 <- table2 %>%
  dplyr::select(Year = year, Date = date, Treatment = treatment, variable, result_with_sig) %>%
  pivot_wider(names_from = variable, values_from = result_with_sig)

# Format table with proper date formatting and year grouping
table2 <- table2 %>%
  mutate(
    Year = as.character(Year),
    Date = format(as.Date(Date), "%B %d")  # Format as "July 17"
  ) %>%
  arrange(Year, as.Date(paste(Year, Date), format = "%Y %B %d"), Treatment) %>%
  group_by(Year) %>%
  mutate(
    Year = ifelse(row_number() == 1, Year, ""),  # Show year only once per group
    date_order = as.Date(paste(ifelse(Year == "", first(Year), Year), Date), format = "%Y %B %d")
  ) %>%
  ungroup() %>%
  arrange(date_order, Treatment) %>%
  dplyr::select(-date_order)

# Calculate ANOVA for source of variation
aov_ammonium <- aov(ammonia_ppm ~ year * date * treatment, data = df)
aov_nitrate <- aov(nitrate_ppm ~ year * date * treatment, data = df)
aov_total_n <- aov(total_inorganic_n ~ year * date * treatment, data = df)

# Extract p-values for source of variation
source_pvals <- tibble(
  source = c("Date", "Treatment", "Date × Treatment"),
  ammonium = summary(aov_ammonium)[[1]][c(2, 3, 6), "Pr(>F)"],
  nitrate = summary(aov_nitrate)[[1]][c(2, 3, 6), "Pr(>F)"],
  total_n = summary(aov_total_n)[[1]][c(2, 3, 6), "Pr(>F)"]
) %>%
  mutate(
    across(c(ammonium, nitrate, total_n), ~ case_when(
      .x < 0.001 ~ "< 0.001",
      .x < 0.01 ~ sprintf("%.3f", .x),
      TRUE ~ sprintf("%.2f", .x)
    ))
  )

# Create source of variation rows
source_rows <- source_pvals %>%
  mutate(
    Year = "",
    Date = "",
    Treatment = source,
    .before = 1
  ) %>%
  dplyr::select(-source)

# Add separator and source rows
separator_row <- tibble(
  Year = "Source of Variation",
  Date = "",
  Treatment = "",
  ammonium = "",
  nitrate = "",
  total_n = ""
)

# Identify date breaks for horizontal lines
table2_with_breaks <- table2 %>%
  mutate(
    date_group = ifelse(Year != "", Date, lag(Date, default = "")),
    is_new_date = Date != lag(Date, default = "")
  )

table2_with_source <- bind_rows(table2_with_breaks, separator_row, source_rows)

table2_gt <- table2_with_source %>%
  gt() %>%
  tab_header(title = md("**Table 2. Salt-extractable inorganic nitrogen**")) %>%
  cols_label(
    ammonium = md("Ammonium<br>(mg kg<sup>-1</sup>)"),
    nitrate = md("Nitrate<br>(mg kg<sup>-1</sup>)"),
    total_n = md("Total Inorganic N<br>(mg kg<sup>-1</sup>)")
  ) %>%
  # Add horizontal lines between different dates
  tab_style(
    style = cell_borders(sides = "top", weight = px(1), color = "gray"),
    locations = cells_body(rows = is_new_date == TRUE & !is.na(is_new_date))
  ) %>%
  # Style the source of variation section
  tab_style(
    style = cell_borders(sides = "top", weight = px(2)),
    locations = cells_body(rows = Year == "Source of Variation")
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(rows = Year == "Source of Variation")
  ) %>%
  # Hide the helper columns
  cols_hide(columns = c(date_group, is_new_date)) %>%
  tab_footnote(
    footnote = "Letters indicate significance levels: a = p < 0.001, b = p < 0.01, c = p < 0.05",
    locations = cells_title(groups = "title")
  )

# Save in multiple formats for different uses
gtsave(table2_gt, filename = "tables/table2_salt_extractable.html")  # For viewing/web
gtsave(table2_gt, filename = "tables/table2_salt_extractable.rtf")   # For Word documents - BEST for Word!

# Alternative: Save as PNG for inserting as image in Word
gtsave(table2_gt, filename = "tables/table2_salt_extractable.png", expand = 10)
```

# Table 3
```{r}
df <- read_csv("data/clean_flux.csv")  %>% 
  clean_names() %>%
  rename(date = year_month_day) 

trt <- read_csv("data/metadata/plot_treatments.csv") %>% 
  clean_names()  %>% 
  # add leading zero to plot numbers
  mutate(plot = str_pad(plot, width = 2, side = "left", pad = "0")) %>%
  select(!growing_season)

# compare columns
compare_df_cols(df, trt)
```


```{r}
trt_2023 <- trt %>%
  filter(date == "2023-07-01")

trt_2024 <- trt %>%
  filter(date == "2024-07-01")
```

A barplot of the flux data over time facted by plot and RowvsInterrow

```{r}
trt_year <- bind_rows(
  trt_2023 %>% mutate(year = 2023),
  trt_2024 %>% mutate(year = 2024)
) %>% select(plot, year, treatment)

df <- df %>%
  mutate(plot = str_pad(plot, width = 2, pad = "0"),
         year = year(date)) %>%
  left_join(trt_year, by = c("plot", "year"))
```

```{r}
head(df)
summary(df)
table(df$treatment, useNA = "ifany")
df %>% count(year, plot)
df %>% filter(is.na(treatment))
anti_join(df, trt_2023 %>% mutate(year = 2023) %>% select(plot, year), by = c("plot", "year"))
anti_join(df, trt_2024 %>% mutate(year = 2024) %>% select(plot, year), by = c("plot", "year"))
```

```{r}
# sanity checks
table(df$treatment, useNA = "ifany")
range(df$date, na.rm = TRUE)

df %>%
  filter(!is.na(treatment)) %>%
  group_by(plot, rowvs_interrow, treatment, date) %>%
  summarise(n = sum(!is.na(gnha_day_no_negative)), .groups = "drop") %>%
  count(n) %>% arrange(n)
```

```{r}
# prepare daily summary per treatment
daily_summary <- df %>%
  filter(!is.na(treatment)) %>%
  group_by(treatment, date) %>%
  summarise(
    mean_flux = mean(gnha_day_no_negative, na.rm = TRUE),
    se_flux   = sd(gnha_day_no_negative, na.rm = TRUE) / sqrt(sum(!is.na(gnha_day_no_negative))),
    .groups = "drop"
  )

# time-series with ribbon (one panel per plot, columns = row_vs_interrow)
ggplot(daily_summary, aes(x = date, y = mean_flux, fill = treatment)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ treatment) +
  scale_x_date(date_breaks = "1 day", date_labels = "%b %d") +
  labs(x = "Date", y = "GNHA Flux (g N/m²/day)", fill = "Treatment") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 7))
```
```{r}
# 1) daily means (no SE yet)
daily_summary <- df %>%
  filter(!is.na(treatment)) %>%
  mutate(date = as.Date(date), year = lubridate::year(date)) %>%
  group_by(plot, rowvs_interrow, treatment, year, date) %>%
  summarise(mean_flux = mean(gnha_day_no_negative, na.rm = TRUE), .groups = "drop")

# 2) distinct groups to iterate
groups <- daily_summary %>%
  distinct(plot, rowvs_interrow, treatment, year) %>%
  arrange(plot, rowvs_interrow, treatment, year)

# 3) iterate per group (explicit, easy to debug)
library(purrr)
interp <- pmap_dfr(
  groups,
  function(plot, rowvs_interrow, treatment, year) {
    sub <- daily_summary %>%
      filter(plot == !!plot, rowvs_interrow == !!rowvs_interrow, treatment == !!treatment, year == !!year) %>%
      arrange(date)

    start <- as.Date(paste0(year, "-01-01"))
    end   <- as.Date(paste0(year, "-12-31"))
    days  <- seq(start, end, by = "day")

    if (nrow(sub) == 0 || all(is.na(sub$mean_flux))) {
      mean_lin <- rep(NA_real_, length(days))
    } else {
      mean_lin <- approx(
        x = as.numeric(sub$date[!is.na(sub$mean_flux)]),
        y = sub$mean_flux[!is.na(sub$mean_flux)],
        xout = as.numeric(days),
        rule = 2, ties = "ordered"
      )$y
    }

    tibble(
      plot = plot,
      rowvs_interrow = rowvs_interrow,
      treatment = treatment,
      year = year,
      date = days,
      mean_flux_lin = mean_lin
    )
  }
)

# 4) aggregate by treatment+year and compute SE now (on interpolated daily values)
agg_by_trt_year <- interp %>%
  group_by(treatment, year, date) %>%
  summarise(
    n_plots = sum(!is.na(mean_flux_lin)),
    mean_flux = mean(mean_flux_lin, na.rm = TRUE),
    se_flux = ifelse(n_plots > 1, sd(mean_flux_lin, na.rm = TRUE) / sqrt(n_plots), NA_real_),
    .groups = "drop"
  )
```

```{r}
# Create publication-quality aggregated plot
ggplot(agg_by_trt_year, 
       aes(x = date, y = mean_flux, color = treatment)) +
  # Add ribbons for SE
  geom_ribbon(
    aes(ymin = mean_flux - se_flux, 
        ymax = mean_flux + se_flux,
        fill = treatment),
    alpha = 0.2, 
    color = NA
  ) +
  # Add lines and points
  geom_line(linewidth = 1) +
  geom_point(size = 2, alpha = 0.7) +
  # Split by year but keep treatments together
  facet_grid(. ~ year, scales = "free_x", space = "free_x") +
  # Custom colors
  scale_color_manual(
    values = c(
      "Sorghum" = "#D2B48C",
      "Sorghum + Rye" = "#8B4513",
      "Corn" = "#fda500",
      "Soy" = "#E9967A"
    )
  ) +
  scale_fill_manual(
    values = c(
      "Sorghum" = "#D2B48C",
      "Sorghum + Rye" = "#8B4513",
      "Corn" = "#fda500",
      "Soy" = "#E9967A"
    )
  ) +
  # Axis formatting
  scale_x_date(
    date_breaks = "1 month",
    date_labels = "%b",
    expand = expansion(mult = 0.02)
  ) +
  # Labels
  labs(
    x = "Month",
    y = expression("Daily N"[2]*"O Flux (g N ha"^"-1"*")"),
    color = "Treatment",
    fill = "Treatment"
  ) +
  # Theme customization
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    axis.title = element_text(size = 14),
    legend.position = "bottom",
    legend.box = "horizontal",
    panel.grid.minor = element_blank(),
    panel.spacing = unit(2, "lines"),
    strip.text = element_text(size = 12, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
``` 

```{r}
# First, mark which days had actual measurements
actual_days <- daily_summary %>%
  select(treatment, date) %>%
  distinct() %>%
  mutate(measured = TRUE)

# Add this information to the aggregated data
agg_plot_data <- agg_by_trt_year %>%
  left_join(actual_days, by = c("treatment", "date")) %>%
  mutate(measured = replace_na(measured, FALSE))

# Example usage for your plot:
ggplot(agg_plot_data, aes(x = date, y = mean_flux, fill = treatment)) +
  geom_col(aes(alpha = measured), width = 1) +
  facet_wrap(~ treatment, ncol = 1, scales = "free_y") +
  scale_alpha_manual(values = c("TRUE" = 1, "FALSE" = 0.5)) +
  scale_x_date(
    date_breaks = "1 month",
    date_labels = "%b",
    expand = expansion(mult = 0.02)
  ) +
  labs(
    x = "Month",
    y = expression("Daily N"[2]*"O Flux (g N ha"^"-1"*")"),
    alpha = "Measured"
  ) +
  scale_fill_hokusai_d() +
  theme_hokusai(base_size = 14) 
```